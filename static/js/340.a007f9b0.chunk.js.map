{"version":3,"file":"static/js/340.a007f9b0.chunk.js","mappings":"0MACA,EAA0B,yBAA1B,EAAiE,6BAAjE,EAAyG,0BAAzG,EAA0I,sBAA1I,EAA+K,8BCA/K,EAA6D,yBAA7D,EAA+F,wBAA/F,EAAgI,wBAAhI,EAAgK,uBAAhK,EAA8L,sBAA9L,EAA2N,sB,mBCQ9MA,EAAiC,SAACC,GAC3C,IAAMC,GAAO,IAAIC,MAAOC,WASlBC,EARa,WACf,IAAIC,GAAS,IAAIH,MAAOI,aACxB,OAAID,EAAS,GACF,IAAMA,EAENA,EAGCC,GAEhB,OAAO,iBAAKC,UAAWC,EAAhB,WACH,gBAAKC,IAAKC,EAAQC,IAAK,SAAUJ,UAAWC,KAE5C,gBAAKD,UAAWC,KAEhB,gBAAKD,UAAWC,EAAhB,UACI,gBAAKD,UAAWC,EAAhB,SAAyBR,EAAMY,aAEnC,gBAAKL,UAAWC,EAAhB,mBAA4BP,EAA5B,YAAoCG,SC5B5C,EAAuB,yBAAvB,EAAwD,0BAAxD,EAA2F,2BAA3F,EAA+H,2BAA/H,EAAqK,6B,UCKxJS,EAAmC,SAACb,GAC7C,OACI,gBAAKO,UAAWC,EAAhB,UACI,SAAC,KAAD,CAASM,GAAE,qBAAgBd,EAAMe,IAAMR,UAAW,SAACS,GAAD,OAAcA,EAAWR,EAAWA,GAAtF,UACI,iBAAKD,UAAWC,EAAhB,WACI,gBAAKC,IAAKC,EAAQH,UAAWC,EAAUG,IAAK,WAC3CX,EAAMiB,a,gDCAdC,EAAiB,SAAClB,GAC3B,IAMMmB,EAAmBC,EAAAA,GAAW,CAChCC,WAAYD,EAAAA,KAAaE,IAAI,IAAjB,2BAAkDC,SAAS,cAG3E,OACI,0BACI,SAAC,KAAD,CACIC,cAb6B,CACrCH,WAAY,IAaJF,iBAAkBA,EAClBM,SAAU,SAACC,EAAD,GAA0B,IAAhBC,EAAe,EAAfA,WAZZ,SAACD,GACjB1B,EAAM4B,YAAYF,EAAOL,YAYbQ,CAAcH,GACdC,EAAU,CAACD,OAAQ,CAACL,WAAY,OALxC,UAOI,UAAC,KAAD,YACI,SAACS,EAAA,EAAD,CAAaC,QAAS,WAAYd,KAAM,aAAce,YAAa,uBACnE,0BACI,mBAAQzB,UAAWC,EAAAA,EAAAA,OAAUyB,KAAM,SAAnC,4BCpBXC,EAAU,SAAClC,GACpB,IAAImC,EAAiBnC,EAAMoC,YAAYC,QAAQC,KAAI,SAACC,EAAGC,GAAJ,OAAc,SAAC3B,EAAD,CAAYE,GAAIwB,EAAExB,GAAIE,KAAMsB,EAAEtB,MAAWuB,MACtGC,EAAmBzC,EAAMoC,YAAYM,SAASJ,KAAI,SAAC1B,EAAS4B,GAAV,OAAoB,SAACzC,EAAD,CAASa,QAASA,EAAQA,QACLG,GAAIH,EAAQG,IAAnByB,MAOxF,OAAKxC,EAAM2C,QAEP,iBAAKpC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACK2B,KAEL,iBAAK5B,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,UACI,gBAAKD,UAAWC,EAAhB,SAAyBiC,OAE7B,SAACvB,EAAD,CAAgBU,YAfR,SAACP,GACjBrB,EAAM4B,YAAYP,aAII,SAAC,KAAD,CAAUP,GAAI,YCY5C,GAAe8B,EAAAA,EAAAA,IAA6BC,EAAAA,GACxCC,EAAAA,EAAAA,KAhBkB,SAACC,GACnB,MAAO,CACHX,YAAaW,EAAMX,YACnBO,OAAQI,EAAMC,KAAKL,WAGF,SAACM,GACtB,MAAO,CACHrB,YAAa,SAACP,GACV4B,GAASC,EAAAA,EAAAA,GAAc7B,SAMnC,EAnByB,SAACrB,GACtB,OAAO,SAACkC,EAAD,CAAUE,YAAapC,EAAMoC,YAAaR,YAAa5B,EAAM4B,YAAae,OAAQ3C,EAAM2C","sources":["webpack://social-ts/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://social-ts/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.tsx","webpack://social-ts/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__vAzAs\",\"dialogsItem\":\"Dialogs_dialogsItem__r3rrJ\",\"messages\":\"Dialogs_messages__AB6o2\",\"item\":\"Dialogs_item__Agl4i\",\"messageBlock\":\"Dialogs_messageBlock__n0u1V\"};","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Message_wrapper__Npaq+\",\"message\":\"Message_message__awEiV\",\"avatar\":\"Message_avatar__xZtwQ\",\"bubble\":\"Message_bubble__kqiwX\",\"angle\":\"Message_angle__mQ8e9\",\"text\":\"Message_text__F48aC\",\"time\":\"Message_time__afWWl\"};","import React from 'react';\r\nimport s from './../Message/Message.module.css'\r\nimport avatar from '../../../assets/images/user.png'\r\n\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nexport const Message: React.FC<MessageType> = (props) => {\r\n    const hour = new Date().getHours();\r\n    const getMinutes = () => {\r\n        let minute = new Date().getMinutes()\r\n        if (minute < 10) {\r\n            return '0' + minute\r\n        } else {\r\n            return minute\r\n        }\r\n    }\r\n    const minutes = getMinutes()\r\n\r\n    return <div className={s.message}>\r\n        <img src={avatar} alt={'avatar'} className={s.avatar}/>\r\n\r\n        <div className={s.angle}/>\r\n\r\n        <div className={s.bubble}>\r\n            <div className={s.text}>{props.message}</div>\r\n        </div>\r\n        <div className={s.time}>{`${hour}:${minutes}`}</div>\r\n    </div>\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"DialogItem_item__qLxTI\",\"block\":\"DialogItem_block__TltuG\",\"avatar\":\"DialogItem_avatar__RxR40\",\"active\":\"DialogItem_active__wFFhz\",\"inactive\":\"DialogItem_inactive__apk8I\"};","import React from 'react';\r\nimport s from './../DialogItem/DialogItem.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {DialogType} from '../../../redux/dialogs-reducer';\r\nimport avatar from '../../../assets/images/user.png'\r\n\r\nexport const DialogItem: React.FC<DialogType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <NavLink to={`/dialogues/${props.id}`} className={(isActive) => isActive ? s.active : s.inactive}>\r\n                <div className={s.block}>\r\n                    <img src={avatar} className={s.avatar} alt={'avatar'}/>\r\n                    {props.name}\r\n                </div>\r\n            </NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {Form, Formik} from \"formik\";\r\nimport s from '../../common/Button/Button.module.css'\r\nimport {FormControl} from '../../common/FormControl/FormControl';\r\nimport * as Yup from \"yup\";\r\n\r\ntype AddMessageFormType = {\r\n    sendMessage: (values: string) => void\r\n}\r\ntype InitialValuesType = {\r\n    newMessage: string\r\n}\r\nexport const AddMessageForm = (props: AddMessageFormType) => {\r\n    const initialValues: InitialValuesType = {\r\n        newMessage: ''\r\n    }\r\n    let addNewMessage = (values: InitialValuesType) => {\r\n        props.sendMessage(values.newMessage);\r\n    }\r\n    const validationSchema = Yup.object({\r\n        newMessage: Yup.string().max(3000, `The message is too long`).required('required')\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                validationSchema={validationSchema}\r\n                onSubmit={(values, {resetForm}) => {\r\n                    addNewMessage(values);\r\n                    resetForm({values: {newMessage: ''}})\r\n                }}>\r\n                <Form>\r\n                    <FormControl control={'textarea'} name={'newMessage'} placeholder={\"add a message ...\"}/>\r\n                    <div>\r\n                        <button className={s.button} type={'submit'}>Send</button>\r\n                    </div>\r\n                </Form>\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AddMessageForm} from './Message/AddMessageForm';\r\nimport {DialogPageType} from '../../redux/dialogs-reducer';\r\n\r\n\r\ntype DialogPagePropsType = {\r\n    dialogsPage: DialogPageType\r\n    sendMessage: (newMessage: string) => void\r\n    isAuth: boolean\r\n}\r\n\r\nexport const Dialogs = (props: DialogPagePropsType) => {\r\n    let dialogElements = props.dialogsPage.dialogs.map((d, index) => <DialogItem id={d.id} name={d.name} key={index}/>);\r\n    let messagesElements = props.dialogsPage.messages.map((message, index) => <Message message={message.message}\r\n                                                                                       key={index} id={message.id}/>);\r\n\r\n    let addNewMessage = (newMessage: string) => {\r\n        props.sendMessage(newMessage)\r\n    }\r\n\r\n\r\n    if (!props.isAuth) return <Redirect to={'/login'}/>;\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItem}>\r\n                {dialogElements}\r\n            </div>\r\n            <div className={s.messageBlock}>\r\n                <div className={s.messages}>\r\n                    <div className={s.item}>{messagesElements}</div>\r\n                </div>\r\n                <AddMessageForm sendMessage={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport {connect} from 'react-redux';\r\nimport {compose, Dispatch} from 'redux';\r\nimport {DialogPageType, sendMessageAC} from '../../redux/dialogs-reducer';\r\nimport {AppRootStateType} from '../../redux/store';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {Dialogs} from './Dialogs';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: DialogPageType\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    sendMessage: (newMessage: string) => void\r\n}\r\ntype DialogsContainerType = MapDispatchToPropsType & MapStateToPropsType\r\n\r\nconst DialogsContainer = (props: DialogsContainerType) => {\r\n    return <Dialogs  dialogsPage={props.dialogsPage} sendMessage={props.sendMessage} isAuth={props.isAuth}/>\r\n}\r\n\r\nlet mapStateToProps = (state: AppRootStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (newMessage: string) => {\r\n            dispatch(sendMessageAC(newMessage));\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default compose<React.ComponentType>(withAuthRedirect,\r\n    connect(mapStateToProps, mapDispatchToProps))(DialogsContainer);"],"names":["Message","props","hour","Date","getHours","minutes","minute","getMinutes","className","s","src","avatar","alt","message","DialogItem","to","id","isActive","name","AddMessageForm","validationSchema","Yup","newMessage","max","required","initialValues","onSubmit","values","resetForm","sendMessage","addNewMessage","FormControl","control","placeholder","type","Dialogs","dialogElements","dialogsPage","dialogs","map","d","index","messagesElements","messages","isAuth","compose","withAuthRedirect","connect","state","auth","dispatch","sendMessageAC"],"sourceRoot":""}