{"version":3,"file":"static/js/193.28b48573.chunk.js","mappings":"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","sources":["webpack://social-ts/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://social-ts/./src/components/Profile/editProfileModal/ProfileModal.module.css?34c9","components/Profile/editProfileModal/ProfileModal.tsx","components/common/Button/Button.tsx","webpack://social-ts/./src/components/Profile/Profile.module.css?b512","components/Profile/Contact.tsx","components/Profile/AboutMe.tsx","webpack://social-ts/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://social-ts/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm.tsx","components/Profile/MyPosts/MyPostContainer.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ProfileInfo_container__BrzbR\",\"backgroundPhoto\":\"ProfileInfo_backgroundPhoto__xZt53\",\"profilePhotoWrapper\":\"ProfileInfo_profilePhotoWrapper__NNs1D\",\"profilePhoto\":\"ProfileInfo_profilePhoto__XjvL+\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__ydUTR\",\"name\":\"ProfileInfo_name__5oCAG\",\"status\":\"ProfileInfo_status__TyhNA\"};","import {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatus = (props: ProfileStatusType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    const [status, setStatus] = useState<string>(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateUserStatus(status)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                {\r\n                    !editMode && <span onDoubleClick={activateEditMode}>{props.status || '-----'}</span>\r\n                }\r\n            </div>\r\n            <div>\r\n                {\r\n                    editMode &&\r\n                    <input autoFocus onChange={onChangeHandler} value={status} onBlur={deactivateEditMode}/>\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","import React, {ChangeEvent} from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {PhotosType, ProfileType} from '../../../redux/profile-reducer';\r\nimport {ProfileStatus} from './ProfileStatus';\r\nimport profilePhoto from '../../../assets/images/profile.jpg'\r\nimport backgroundPhoto from '../../../assets/images/background.jpg'\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photo: File) => void\r\n    photos: PhotosType\r\n}\r\n\r\nexport const ProfileInfo = ({profile, status, updateUserStatus, isOwner, savePhoto, photos }: ProfileInfoType) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.files && e.currentTarget.files.length) {\r\n            savePhoto(e.currentTarget.files[0]);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.container}>\r\n                <img className={s.backgroundPhoto}\r\n                     src={backgroundPhoto} alt={'background'}/>\r\n                <div className={s.profilePhotoWrapper}>\r\n                    <img className={s.profilePhoto} src={photos.large ?? profilePhoto} alt={'profile'}/>\r\n                    {isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n                </div>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <h1 className={s.name}>{profile.fullName}</h1>\r\n                <ProfileStatus status={status} updateUserStatus={updateUserStatus}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"darkBG\":\"ProfileModal_darkBG__fvneP\",\"centered\":\"ProfileModal_centered__Afty2\",\"modal\":\"ProfileModal_modal__fKvKg\",\"modalHeader\":\"ProfileModal_modalHeader__Sj-z6\",\"heading\":\"ProfileModal_heading__j6BZv\",\"modalContent\":\"ProfileModal_modalContent__B4NiU\",\"inputBlock\":\"ProfileModal_inputBlock__qFP4m\",\"input\":\"ProfileModal_input__sVMil\",\"label\":\"ProfileModal_label__f7DLQ\",\"buttons\":\"ProfileModal_buttons__cyaej\",\"backBtn\":\"ProfileModal_backBtn__YX1ER\",\"submitBtn\":\"ProfileModal_submitBtn__PknyT\"};","import React from 'react';\r\nimport s from './ProfileModal.module.css';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {ProfileType, saveProfile} from '../../../redux/profile-reducer';\r\nimport {AppDispatch} from '../../../redux/store';\r\n\r\ntype ProfileModalType = {\r\n    setEditMode: (edit: boolean) => void\r\n    profile: ProfileType\r\n}\r\n\r\nconst ProfileModal = ({profile, setEditMode}: ProfileModalType) => {\r\n    const dispatch:AppDispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            fullName: profile.fullName,\r\n            aboutMe: profile.aboutMe,\r\n            lookingForAJob: profile.lookingForAJob,\r\n            lookingForAJobDescription: profile.lookingForAJobDescription,\r\n            github: profile.contacts.github,\r\n            vk: profile.contacts.vk,\r\n            facebook: profile.contacts.facebook,\r\n            instagram: profile.contacts.instagram,\r\n            twitter: profile.contacts.twitter,\r\n            website: profile.contacts.website,\r\n            youtube: profile.contacts.youtube,\r\n            mainLink: profile.contacts.mainLink,\r\n        },\r\n        onSubmit: (values) => {\r\n            console.log(values.lookingForAJob)\r\n            const profileData = {\r\n                fullName: values.fullName,\r\n                aboutMe: values.aboutMe,\r\n                lookingForAJob: values.lookingForAJob,\r\n                lookingForAJobDescription: values.lookingForAJobDescription,\r\n                contacts: {\r\n                    github: values.github,\r\n                    vk: values.vk,\r\n                    facebook: values.facebook,\r\n                    instagram: values.instagram,\r\n                    twitter: values.twitter,\r\n                    website: values.website,\r\n                    youtube: values.youtube,\r\n                    mainLink: values.mainLink\r\n                }\r\n            }\r\n            dispatch(saveProfile(profileData))\r\n            setEditMode(false);\r\n        },\r\n    });\r\n\r\n    const getBack = () => {\r\n        setEditMode(false);\r\n    }\r\n\r\n    return (\r\n        <div className={s.darkBG}>\r\n            <div className={s.centered}>\r\n                <div className={s.modal}>\r\n                    <div className={s.modalHeader}>\r\n                        <h1 className={s.heading}>Edit profile</h1>\r\n                    </div>\r\n                    <div className={s.modalContent}>\r\n                        <form onSubmit={formik.handleSubmit}>\r\n                            <div className={s.inputBlock}>\r\n                                <label className={s.label} htmlFor=\"fullName\">Name</label>\r\n                                <input\r\n                                    id=\"fullName\"\r\n                                    name=\"fullName\"\r\n                                    type=\"text\"\r\n                                    className={s.input}\r\n                                    onChange={formik.handleChange}\r\n                                    value={formik.values.fullName}\r\n                                />\r\n                            </div>\r\n                            <div className={s.inputBlock}>\r\n                                <label className={s.label} htmlFor=\"aboutMe\">About me</label>\r\n                                <input\r\n                                    id=\"aboutMe\"\r\n                                    name=\"aboutMe\"\r\n                                    type=\"text\"\r\n                                    className={s.input}\r\n                                    onChange={formik.handleChange}\r\n                                    value={formik.values.aboutMe}\r\n                                />\r\n                            </div>\r\n                            <div className={s.inputBlock} style={{marginTop: '5px', marginBottom: '5px'}}>\r\n                                <label className={s.label} htmlFor=\"lookingForAJob\">Looking for a job?</label>\r\n                                <input\r\n                                    id=\"lookingForAJob\"\r\n                                    name=\"lookingForAJob\"\r\n                                    type=\"checkbox\"\r\n                                    onChange={formik.handleChange}\r\n                                    value={'lookingForAJob'}\r\n                                />\r\n                            </div>\r\n                            <div className={s.inputBlock}>\r\n                                <label className={s.label} htmlFor=\"lookingForAJobDescription\">Your skills</label>\r\n                                <input\r\n                                    id=\"lookingForAJobDescription\"\r\n                                    name=\"lookingForAJobDescription\"\r\n                                    type=\"text\"\r\n                                    className={s.input}\r\n                                    onChange={formik.handleChange}\r\n                                    value={formik.values.lookingForAJobDescription}\r\n                                />\r\n                            </div>\r\n                            <div className={s.inputBlock}>\r\n                                <label className={s.label} htmlFor=\"github\">GitHub</label>\r\n                                <input\r\n                                    id=\"github\"\r\n                                    name=\"github\"\r\n                                    type=\"text\"\r\n                                    className={s.input}\r\n                                    onChange={formik.handleChange}\r\n                                    value={formik.values.github}\r\n                                />\r\n                            </div>\r\n                            <div className={s.inputBlock}>\r\n                                <label className={s.label} htmlFor=\"vk\">VK</label>\r\n                                <input\r\n                                    id=\"vk\"\r\n                                    name=\"vk\"\r\n                                    type=\"text\"\r\n                                    className={s.input}\r\n                                    onChange={formik.handleChange}\r\n                                    value={formik.values.vk}\r\n                                />\r\n                            </div>\r\n                            <div className={s.inputBlock}>\r\n                                <label className={s.label} htmlFor=\"facebook\">Facebook</label>\r\n                                <input\r\n                                    id=\"facebook\"\r\n                                    name=\"facebook\"\r\n                                    type=\"text\"\r\n                                    className={s.input}\r\n                                    onChange={formik.handleChange}\r\n                                    value={formik.values.facebook}\r\n                                />\r\n                            </div>\r\n                            <div className={s.inputBlock}>\r\n                                <label className={s.label} htmlFor=\"instagram\">Instagram</label>\r\n                                <input\r\n                                    id=\"instagram\"\r\n                                    name=\"instagram\"\r\n                                    type=\"text\"\r\n                                    className={s.input}\r\n                                    onChange={formik.handleChange}\r\n                                    value={formik.values.instagram}\r\n                                />\r\n                            </div>\r\n                            <div className={s.inputBlock}>\r\n                                <label className={s.label} htmlFor=\"twitter\">Twitter</label>\r\n                                <input\r\n                                    id=\"twitter\"\r\n                                    name=\"twitter\"\r\n                                    type=\"text\"\r\n                                    className={s.input}\r\n                                    onChange={formik.handleChange}\r\n                                    value={formik.values.twitter}\r\n                                />\r\n                            </div>\r\n                            <div className={s.inputBlock}>\r\n                                <label className={s.label} htmlFor=\"website\">Website</label>\r\n                                <input\r\n                                    id=\"website\"\r\n                                    name=\"website\"\r\n                                    type=\"text\"\r\n                                    className={s.input}\r\n                                    onChange={formik.handleChange}\r\n                                    value={formik.values.website}\r\n                                />\r\n                            </div>\r\n                            <div className={s.inputBlock}>\r\n                                <label className={s.label} htmlFor=\"youtube\">YouTube</label>\r\n                                <input\r\n                                    id=\"youtube\"\r\n                                    name=\"youtube\"\r\n                                    type=\"text\"\r\n                                    className={s.input}\r\n                                    onChange={formik.handleChange}\r\n                                    value={formik.values.youtube}\r\n                                />\r\n                            </div>\r\n                            <div className={s.inputBlock}>\r\n                                <label className={s.label} htmlFor=\"mainLink\">Main Link</label>\r\n                                <input\r\n                                    id=\"mainLink\"\r\n                                    name=\"mainLink\"\r\n                                    type=\"text\"\r\n                                    className={s.input}\r\n                                    onChange={formik.handleChange}\r\n                                    value={formik.values.mainLink}\r\n                                />\r\n                            </div>\r\n                            <div className={s.buttons}>\r\n                                <button className={s.submitBtn} type=\"submit\">Submit</button>\r\n                                <button className={s.backBtn} onClick={getBack}>Back</button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileModal;","import React from 'react';\r\nimport s from './Button.module.css'\r\n\r\ntype ButtonType = {\r\n    title: string\r\n    callback: () => void\r\n}\r\n\r\nexport const Button = ({title, callback}: ButtonType) => {\r\n    return (\r\n        <div>\r\n            <button onClick={callback} className={s.button}>{title}</button>\r\n        </div>\r\n    );\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"aboutMeBlock\":\"Profile_aboutMeBlock__+iWIN\",\"contactsBlock\":\"Profile_contactsBlock__oKQbb\"};","import React from 'react';\r\nimport s from \"./Profile.module.css\";\r\n\r\ntype ContactType = {\r\n    contactTitle: string\r\n    contactValue: string | null\r\n}\r\n\r\nconst Contact = ({contactTitle, contactValue}: ContactType) => {\r\n    return (\r\n        <div className={s.contactsBlock}>\r\n            <b>{contactTitle}:</b> {contactValue}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Contact;","import React from 'react';\r\nimport {ContactsType, ProfileType} from \"../../redux/profile-reducer\";\r\n\r\nimport s from './Profile.module.css';\r\nimport Contact from \"./Contact\";\r\nimport {Preloader} from '../common/Preloader/Preloader';\r\n\r\ntype AboutMeType = {\r\n    profile: ProfileType | null\r\n}\r\n\r\nconst AboutMe = ({profile}: AboutMeType) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={s.aboutMeBlock}>\r\n            <h1>About me</h1>\r\n            <div>\r\n                <div>\r\n                    <b>Looking for a job:</b> {profile.lookingForAJob ? 'yes' : 'no'}\r\n                </div>\r\n                {profile.lookingForAJob &&\r\n                    <div>\r\n                        <b>My professional skills:</b> {profile.lookingForAJobDescription}\r\n                    </div>\r\n                }\r\n                <div>\r\n                    <b>About me:</b> {profile.aboutMe}\r\n                </div>\r\n                <div>\r\n                    <b>Contacts:</b> {Object.keys(profile.contacts).map(c => {\r\n                        return <Contact\r\n                            key={c}\r\n                            contactTitle={c}\r\n                            contactValue={profile.contacts[c as keyof ContactsType]}/>\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AboutMe;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__KeoxC\",\"posts\":\"MyPosts_posts__Au0bF\",\"textareaWrapper\":\"MyPosts_textareaWrapper__E1Nq-\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__5yJKT\",\"postBlock\":\"Post_postBlock__yiJI2\",\"text\":\"Post_text__LWxEo\",\"likes\":\"Post_likes__K7ckg\"};","import React from \"react\";\r\nimport s from './Post.module.css'\r\nimport {PostType} from '../../../../redux/profile-reducer';\r\nimport userImg from '../../../../assets/images/user.png'\r\nimport like from '../../../../assets/images/like.png'\r\n\r\n\r\nexport const Post: React.FC<PostType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <div className={s.postBlock}>\r\n                <img src={userImg} alt={'user'}/>\r\n                <div className={s.text}>{props.message}</div>\r\n            </div>\r\n            <div className={s.likes}>\r\n                <img src={like} alt={'like'} style={{width: '15px'}}/>\r\n                {props.likesCount}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport {Form, Formik} from \"formik\";\r\nimport s from \"../../common/Button/Button.module.css\";\r\nimport * as Yup from \"yup\";\r\nimport {FormControl} from '../../common/FormControl/FormControl';\r\n\r\ntype AddPostFormType = {\r\n    addPost: (values: string) => void\r\n}\r\ntype InitialValuesType = {\r\n    newPost: string\r\n}\r\nexport const AddPostForm = (props: AddPostFormType) => {\r\n    const initialValues: InitialValuesType = {\r\n        newPost: ''\r\n    }\r\n    let addNewMessage = (values: InitialValuesType) => {\r\n        props.addPost(values.newPost);\r\n    }\r\n    const validationSchema = Yup.object({\r\n        newPost: Yup.string().required('Required').max(200, `Maximum 200 symbols`)\r\n    })\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={initialValues}\r\n            validationSchema={validationSchema}\r\n            onSubmit={(values, {resetForm}) => {\r\n                addNewMessage(values);\r\n                resetForm({values: {newPost: ''}})\r\n            }}>\r\n            <Form>\r\n                <FormControl control={'textarea'}\r\n                             name={'newPost'}\r\n                             placeholder={\"add a post here\"}\r\n                />\r\n                <div>\r\n                    <button className={s.button} type={'submit'}>Post</button>\r\n                </div>\r\n            </Form>\r\n        </Formik>\r\n    );\r\n}\r\n\r\n","import {connect} from 'react-redux';\r\nimport {MyPosts} from './MyPosts';\r\nimport {Dispatch} from 'redux';\r\nimport {addPostAC,  PostType} from '../../../redux/profile-reducer';\r\nimport {AppRootStateType} from '../../../redux/store';\r\n\r\ntype MapStateToPropsType = {\r\n    posts: PostType[],\r\n}\r\ntype MapDispatchToPropsType = {\r\n    onAddPost: (value: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppRootStateType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        onAddPost: (value) => {\r\n            dispatch(addPostAC(value));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostContainer;","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport {Post} from \"./Post/Post\";\r\nimport {PostType} from '../../../redux/profile-reducer';\r\nimport {AddPostForm} from './AddPostForm';\r\n\r\ntype MyPostsPropsType = {\r\n    posts: Array<PostType>\r\n    onAddPost: (value: string) => void\r\n}\r\n\r\n\r\nexport const MyPosts = (props: MyPostsPropsType) => {\r\n\r\n    let postsElements = props.posts.map((p, index) => <Post id={p.id} message={p.message}\r\n                                                            likesCount={p.likesCount}\r\n                                                            key={index}/>)\r\n\r\n    let addPost = (newPost: string) => {\r\n        props.onAddPost(newPost)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3 style={{color: '#8c91b6'}}>My posts</h3>\r\n            <div className={s.textareaWrapper}>\r\n                <AddPostForm addPost={addPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\n","import React, {useState} from 'react';\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {PhotosType, ProfileType} from '../../redux/profile-reducer';\r\nimport {Preloader} from '../common/Preloader/Preloader';\r\nimport ProfileModal from './editProfileModal/ProfileModal';\r\nimport {Button} from '../common/Button/Button';\r\nimport AboutMe from './AboutMe';\r\nimport MyPostContainer from './MyPosts/MyPostContainer';\r\n\r\n\r\ntype ProfilePageType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photo: File) => void\r\n    photos: PhotosType\r\n}\r\n\r\nexport const Profile = (props: ProfilePageType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n\r\n    const editProfile = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                isOwner={props.isOwner}\r\n                savePhoto={props.savePhoto}\r\n                profile={props.profile}\r\n                photos={props.photos}\r\n                status={props.status}\r\n                updateUserStatus={props.updateUserStatus}\r\n            />\r\n            <AboutMe profile={props.profile}/>\r\n            {props.isOwner && <Button title={'edit'} callback={editProfile}/>}\r\n            {editMode && <ProfileModal profile={props.profile} setEditMode={setEditMode}/>}\r\n            <hr/>\r\n            <MyPostContainer/>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n","import React from 'react';\r\nimport {Profile} from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    getUserProfile,\r\n    getUserStatus,\r\n    PhotosType,\r\n    ProfilePageType,\r\n    ProfileType,\r\n    savePhoto,\r\n    updateUserStatus,\r\n} from '../../redux/profile-reducer';\r\nimport {AppRootStateType} from '../../redux/store';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from 'redux';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: any\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    isAuth: boolean\r\n    status: string\r\n    authorizedUserId: number | null\r\n    photos: PhotosType\r\n}\r\n\r\nexport type MapDispatchToPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getUserStatus: (userId: number) => void\r\n    updateUserStatus: (status: string) => void\r\n    savePhoto: (photo: File) => void\r\n}\r\n\r\ntype ProfileContainerType = MapStateToPropsType & MapDispatchToPropsType & RouteComponentProps<PathParamsType>\r\n\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerType, ProfilePageType> {\r\n\r\n    refreshProfile() {\r\n        const {authorizedUserId, match, getUserProfile, getUserStatus} = this.props;\r\n        let userId = match.params.userId;\r\n        if (!userId) {\r\n            userId = authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login');\r\n            }\r\n        }\r\n        if (userId) {\r\n            getUserProfile(userId);\r\n            getUserStatus(userId);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    };\r\n\r\n    componentDidUpdate(prevProps: ProfileContainerType) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId)\r\n            this.refreshProfile();\r\n    };\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     savePhoto={this.props.savePhoto}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateUserStatus={this.props.updateUserStatus}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(ProfileContainer)\r\n\r\nlet mapStateToProps = (state: AppRootStateType): MapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    isAuth: state.auth.isAuth,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    photos: state.profilePage.photos\r\n})\r\n\r\n\r\n\r\n/*export default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus, savePhoto}),\r\n    withRouter,\r\n)(ProfileContainer)*/\r\n\r\nexport default compose<React.ComponentType>(withAuthRedirect, withRouter,\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppRootStateType>\r\n    (mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus, savePhoto}))(ProfileContainer);\r\n\r\n"],"names":["ProfileStatus","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onChange","e","currentTarget","value","onBlur","updateUserStatus","ProfileInfo","profile","isOwner","savePhoto","photos","Preloader","className","s","src","backgroundPhoto","alt","large","profilePhoto","type","files","length","fullName","dispatch","useDispatch","formik","useFormik","initialValues","aboutMe","lookingForAJob","lookingForAJobDescription","github","contacts","vk","facebook","instagram","twitter","website","youtube","mainLink","onSubmit","values","console","log","profileData","saveProfile","handleSubmit","htmlFor","id","name","handleChange","style","marginTop","marginBottom","onClick","Button","title","callback","contactTitle","contactValue","Object","keys","map","c","Post","userImg","message","width","likesCount","AddPostForm","validationSchema","Yup","newPost","required","max","resetForm","addPost","addNewMessage","FormControl","control","placeholder","connect","state","posts","profilePage","onAddPost","addPostAC","postsElements","p","index","color","Profile","ProfileContainer","this","authorizedUserId","match","getUserProfile","getUserStatus","userId","params","history","push","refreshProfile","prevProps","React","compose","withAuthRedirect","withRouter","isAuth","auth"],"sourceRoot":""}